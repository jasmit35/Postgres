# ATT Standard att.conf PostgreSQL Community
# ##########################################################################################
# 01/24/2017 af4299 updated based on learnings from PED-BLEAP and adjusted for Community version
# ##########################################################################################
#
# This parameter assumes you are deploying against SSD.
# For any given query, the planner works through a number of different explain plans, and 
# then attempts to choose the best one.  Part of weighing that  includes some assumptions
# about the kinds of underlying storage technologies being used.  Some of these assumptions
# are embedded in config parameters, like random_page_cost and sequential_page_cost.  These
# are dimensionless (or unitless if you prefer), and only make sense relative to each other.
#
# The default settings for these are 1.0 and 3.0 respectively, meaning that random operations
# are 3x as expensive as sequential, a rule of thumb useful for conventional (spinning rust)
# storage.

# This relative weighting goes into the weighting of various explain plans, and can influence
# choices about optimal paths.

# On a system where SSDs are used for database storage (objects and tables), making the random
# and sequential values the same can improve chosen plans for a subset of queries, depending
# on data demographics.  The technologies used for the xlog, backup and logging directories
# are not important or influential.

# If one cannot choose the storage technology used for the data directory (and it's associated
# tablespaces), I would just leave the setting at default.
# Must be first in att.conf so that we can be sure that all preload is done first
# shared_preload_libraries = ''          # (change requires restart)
# Shared Library settings.  passwordcheck ensures password complexity
# shared_preload_libraries = '$libdir/passwordcheck'
# shared_preload_libraries = '$PGHOME/lib/passwordcheck,$libdir/pgaudit'
# shared_preload_libraries = '$libdir/passwordcheck,$libdir/pgaudit,$libdir/oracle_fdw'
#

random_page_cost = 1.0 



# Comment out the Memory Parameters below and let Dynatune set these values. If you see a performance issue, 
# these memory parameters can be explicitely set, AFTER the dynatune parameters above.

# Memory Parameters:
# work_mem = (set initially to 12MB and monitor /tmp file usage)
# maintenance_work_mem = (set initially to 1GB, used for vacumming, rebuild index, create table as, and analyze  
# shared_buffers =  (25 * Total Memory up to a Max up to 8GB)
# wal_buffers= 64800kB
# effective_cache_size = (.75 * total memory)

temp_buffers=8MB
effective_cache_size=96GB

#Shared Library settings - see postgresql.conf


# Logging Settings

logging_collector = on
log_file_mode = 0644
log_directory = '/opt/app/postgres/log'
log_filename = 'server-%Y-%m-%d-%H.log' 
log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '

log_rotation_size = 100MB
log_rotation_age = 1440
log_truncate_on_rotation = on

##  To gather performance data in a benchmark run, set log_min_duration_statement
##  to 0 to capture all statements
##
##  In normal operations, set log_min_duration_statement to a value just greater
##  than the duration of your most time-consuming statement  will capture
##  abnormally slow queries
## Statements recommended for pgBadger are flagged with #pgBadger:

log_min_duration_statement = -1
#pgBadger:log_min_duration_statement = 0

##  To gather performance data in a benchmark run, set log_autovacuum_min_duration
##  to 0 to capture all autovacuum activity
##
##  In normal operations, set log_autovacuum_min_duration to a value just greater
##  than the duration of a typical autovacuum. This will capture abnormally slow
##  autovacuums in the log

log_autovacuum_min_duration = 1s
#pgBadger:log_autovacuum_min_duration = 0

##  When gathering performance information for pgBadger analysis,
##  set log_rotation_size to 10MB so that server log files don't
##  grow too large


log_connections = on
log_disconnections = on
log_statement = ddl
#pgBadger:log_statement = all
#log_statement = none
log_duration = off
log_error_verbosity = default
log_checkpoints = on
log_lock_waits = on
log_replication_commands = on
log_temp_files = 0

# Debug Level Parameters - DEBUG Trace level 1 – 5, values provide successively-more-detailed information.
# For use by developers. This parameter can be turned on for ADBAs to debug SQL issues without bouncing database.

client_min_messages = warning
log_min_messages = warning
log_min_error_statement = warning

track_io_timing = on
default_statistics_target = 400

pg_stat_statements.max = 5000
pg_stat_statements.track = top
pg_stat_statements.track_utility = on
pg_stat_statements.save=on

# Performance Views DB Parameters (pg_stat_* and

track_activities = on
track_activity_query_size = 1024
track_counts = on
track_functions = pl

# Autovacuum Settings

autovacuum_max_workers = 10
autovacuum_vacuum_scale_factor = 0.1
autovacuum_analyze_scale_factor = 0.05
autovacuum_vacuum_cost_limit = 2000
autovacuum_vacuum_cost_delay = 10ms

# WAL and Checkpoint Settings

wal_level = hot_standby
wal_compression = off

##  The PostgreSQL server will occassionally write "hints" to data files.
##  For example, a typical hint might be something like "some of the rows
##  on this heap page may be visible to active transactions".
##
##  If the hint turns out to be incorrect, the only result is that the
##  database server may check visibility and find that in fact none of
##  the rows are visible to active transactions.
##
##  In other words, if the hint is incorrect, the only result is a slight
##  performance penalty.  On the other hand, if the hint is correct, the
##  database server can save time by avoiding extra work.
##
##  Set wal_log_hints to off in order to avoid generating extra WAL traffic
##  for hint bits.  If you disable wal_log_hints, the database may be slightly
##  slower after a crash, until the obsolete hint bits have been reset.
##
##  See the following article by my colleague Robert Hass for a more
##  thorough explanation: http://rhaas.blogspot.com/2011/11/hint-bits.html

wal_log_hints = off
wal_writer_delay = 100ms
checkpoint_timeout = 10min
checkpoint_completion_target = 0.9

# total number of wal files in pg_xlog = (min no. of files = 4GB/16MB)  (max no. of files) = (8GB/16MB).
# the wal files are over written once you hit max number of wal files.
# if replication slots are being used the min and max wal_size parameters are overrideen.
#
# checkpoint is executed to make sure the database gets updated with contents of the wal files.  
# checkpoint timeout or based on number of files in pg_xlog threshold value set using max_wal_size.
# ckeckpoints are always in play even if replication slots are used.

max_wal_size = 8GB
min_wal_size = 4GB

full_page_writes = on

# Archive Settings

archive_mode = on
#archive_command = 'test ! -f /opt/app/postgres/backup/archive/%f && cp %p /opt/app/postgres/backup/archive/%f'
archive_command =  'rsync -a %p /opt/app/postgres/backup/archive/%f'

# Streaming Replication Settings

max_wal_senders = 5
max_replication_slots = 5
hot_standby = on
hot_standby_feedback = on
track_commit_timestamp=on

# List ofIP address(es) to listen on, comma-separated list of addresses;

listen_addresses = '*'          
port = 5432
unix_socket_directories = '/opt/app/postgres/data'

# Optimizer Settings

cpu_tuple_cost = 0.03

##  Set from_collapse_limit=12 and join_collapse_limit=12 to trade planning
##  effort against plan quality for very large queries.  See the following
##  documentation for more information:
##  https://www.postgresql.org/docs/devel/static/explicit-joins.html

from_collapse_limit = 12
join_collapse_limit = 12

# Miscellameous Settings

##  deadlock_timeout contols the amount of time that the server will wait
##  for a lock before checking for a deadlock.  The default is 1s and that
##  may be too low for a heavily loaded, highly-contended system.  Adjust as
##  needed.

deadlock_timeout = 3s

temp_file_limit = 480MB
bgwriter_delay = 100ms
bgwriter_lru_maxpages = 1000
bgwriter_lru_multiplier = 4.0
effective_io_concurrency = 2

max_connections = 1000
superuser_reserved_connections =10

## After configuring SSL certificates you can enable SSL
ssl = off
